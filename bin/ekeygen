#!/usr/bin/env ruby
require 'gli'
require 'symmetric-encryption'
require 'base64'


begin # XXX: Remove this begin/rescue before distributing your app
  require 'ekeygen'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/ekeygen now"
  exit 64
end

include GLI::App

program_desc 'Make simple to use encrypted environment keys'

version Ekeygen::VERSION

desc 'Directory for password file'
arg_name 'ekeys directory'
flag [:d, :ekey_directory], :default_value => File.join(ENV['HOME'], '.ekeys')

desc 'Create a new combined encrypted environment key'
command :create do |c|

  c.desc 'Data to be encrypted'
  c.arg_name 'argument to be encrypted'
  c.flag [:a, :argument], :required => true

  c.desc 'Encryption password'
  c.arg_name 'Password used to encrypt the value'
  c.flag [:p, :password], :required => true

  c.desc 'Envirnment variable name'
  c.arg_name 'Name of environment variable to assign key to'
  c.flag [:e, :env_var_name], :default_value => 'STUFF'


  c.action do |global_options, options, args|
    SymmetricEncryption.cipher = SymmetricEncryption::Cipher.new(
      :key => options[:p],
      :iv => 'dSomeRandomHashStuff!',
      :cipher => 'aes-128-cbc'
    )

    puts "export #{options[:e].upcase}=\"#{Base64.urlsafe_encode64(SymmetricEncryption.encrypt(options[:a]))}\""

  end
end

desc 'Encode a environment key'
command :enc do |c|

  c.desc 'Data to be encrypted'
  c.arg_name 'argument to be encrypted'
  c.flag [:a, :argument], :required => true

  c.desc 'Envirnment variable name'
  c.arg_name 'Name of environment variable to assign key to'
  c.flag [:e, :env_var_name], :default_value => 'STUFF'

  c.action do |global_options, options, args|
    puts "export #{options[:e].upcase}=\"#{Base64.urlsafe_encode64(options[:a])}\""
    puts "import into ruby : #{options[:e]}=Base64.urlsafe_decode64(ENV[\"#{options[:e].upcase}\"])} "

  end
end





pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end


post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
